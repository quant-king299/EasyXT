# -*- coding: utf-8 -*-
"""
Á≠ñÁï•ÂºÄÂèëÂ≠¶‰π†ÂÆû‰æã - ‰∫§‰∫íÂºèÂ≠¶‰π†Áâà
Êú¨Êñá‰ª∂Â±ïÁ§∫‰∫Ü‰ΩøÁî®easy_xtËøõË°åÈáèÂåñÁ≠ñÁï•ÂºÄÂèëÁöÑÂü∫Êú¨ÊñπÊ≥ïÂíåÊäÄÂ∑ß
ÊØè‰∏™Ê≠•È™§ÈÉΩÈúÄË¶ÅÁî®Êà∑Á°ÆËÆ§ÔºåÊñπ‰æøÈÄêÊ≠•Â≠¶‰π†ÁêÜËß£

‰ΩúËÄÖ: CodeBuddy
ÁâàÊú¨: 2.0 (‰∫§‰∫íÂºèÂ≠¶‰π†Áâà)
"""

import sys
import os
import time
import logging
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Ê∑ªÂä†È°πÁõÆÊ†πÁõÆÂΩïÂà∞PythonË∑ØÂæÑ
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from easy_xt.api import EasyXT

# ÈÖçÁΩÆÊó•Âøó
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def wait_for_user_input(message="ÊåâÂõûËΩ¶ÈîÆÁªßÁª≠..."):
    """Á≠âÂæÖÁî®Êà∑ËæìÂÖ•"""
    input(f"\nüí° {message}")

def print_section_header(step_num, title, description=""):
    """ÊâìÂç∞Á´†ËäÇÊ†áÈ¢ò"""
    print("\n" + "=" * 70)
    print(f"üìö Ê≠•È™§{step_num}: {title}")
    print("=" * 70)
    if description:
        print(f"üìñ Â≠¶‰π†ÁõÆÊ†áÔºö{description}")

def print_subsection(subtitle):
    """ÊâìÂç∞Â≠êÁ´†ËäÇÊ†áÈ¢ò"""
    print(f"\nüìå {subtitle}")
    print("-" * 50)

class BaseStrategy:
    """Âü∫Á°ÄÁ≠ñÁï•Á±ª"""
    
    def __init__(self, account_id, stock_pool):
        self.account_id = account_id
        self.stock_pool = stock_pool if isinstance(stock_pool, list) else [stock_pool]
        self.easy_xt = EasyXT()
        self.is_initialized = False
        
    def initialize(self):
        """ÂàùÂßãÂåñÁ≠ñÁï•"""
        try:
            if self.easy_xt.init_data():
                logger.info("‚úì Êï∞ÊçÆÊúçÂä°ËøûÊé•ÊàêÂäü")
                self.is_initialized = True
                return True
            else:
                logger.error("‚ùå Êï∞ÊçÆÊúçÂä°ËøûÊé•Â§±Ë¥•")
                return False
        except Exception as e:
            logger.error(f"‚ùå Á≠ñÁï•ÂàùÂßãÂåñÂ§±Ë¥•: {e}")
            return False
    
    def buy_stock(self, stock_code, quantity, price=None):
        """‰π∞ÂÖ•ËÇ°Á•®"""
        if not self.is_initialized:
            logger.warning("‚ö†Ô∏è Á≠ñÁï•Êú™ÂàùÂßãÂåñÔºåÊó†Ê≥ïÊâßË°å‰∫§Êòì")
            return False
            
        try:
            if price is None:
                # Â∏Ç‰ª∑‰π∞ÂÖ•
                result = self.easy_xt.buy(
                    account_id=self.account_id,
                    stock_code=stock_code,
                    quantity=quantity,
                    price_type='market'
                )
            else:
                # Èôê‰ª∑‰π∞ÂÖ•
                result = self.easy_xt.buy(
                    account_id=self.account_id,
                    stock_code=stock_code,
                    quantity=quantity,
                    price=price,
                    price_type='limit'
                )
            
            logger.info(f"üìà ‰π∞ÂÖ•ËÆ¢ÂçïÊèê‰∫§: {stock_code}, Êï∞Èáè: {quantity}, ‰ª∑Ê†º: {price or 'Â∏Ç‰ª∑'}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå ‰π∞ÂÖ•Â§±Ë¥•: {e}")
            return False
    
    def sell_stock(self, stock_code, quantity, price=None):
        """ÂçñÂá∫ËÇ°Á•®"""
        if not self.is_initialized:
            logger.warning("‚ö†Ô∏è Á≠ñÁï•Êú™ÂàùÂßãÂåñÔºåÊó†Ê≥ïÊâßË°å‰∫§Êòì")
            return False
            
        try:
            if price is None:
                # Â∏Ç‰ª∑ÂçñÂá∫
                result = self.easy_xt.sell(
                    account_id=self.account_id,
                    stock_code=stock_code,
                    quantity=quantity,
                    price_type='market'
                )
            else:
                # Èôê‰ª∑ÂçñÂá∫
                result = self.easy_xt.sell(
                    account_id=self.account_id,
                    stock_code=stock_code,
                    quantity=quantity,
                    price=price,
                    price_type='limit'
                )
            
            logger.info(f"üìâ ÂçñÂá∫ËÆ¢ÂçïÊèê‰∫§: {stock_code}, Êï∞Èáè: {quantity}, ‰ª∑Ê†º: {price or 'Â∏Ç‰ª∑'}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå ÂçñÂá∫Â§±Ë¥•: {e}")
            return False

class MovingAverageStrategy(BaseStrategy):
    """ÂèåÂùáÁ∫øÁ≠ñÁï•"""
    
    def __init__(self, account_id, stock_pool, short_period=5, long_period=20):
        super().__init__(account_id, stock_pool)
        self.short_period = short_period
        self.long_period = long_period
        
    def calculate_signals(self, stock_code):
        """ËÆ°ÁÆó‰∫§Êòì‰ø°Âè∑"""
        try:
            # Ëé∑ÂèñÂéÜÂè≤Êï∞ÊçÆ
            data = self.easy_xt.get_price(
                codes=stock_code,
                period='1d',
                count=self.long_period + 10
            )
            
            if data is not None and not data.empty:
                # ËÆ°ÁÆóÁßªÂä®Âπ≥ÂùáÁ∫ø
                data[f'MA{self.short_period}'] = data['close'].rolling(self.short_period).mean()
                data[f'MA{self.long_period}'] = data['close'].rolling(self.long_period).mean()
                
                # ÁîüÊàê‰ø°Âè∑
                latest = data.iloc[-1]
                previous = data.iloc[-2]
                
                # ÈáëÂèâÔºöÁü≠ÊúüÂùáÁ∫ø‰∏äÁ©øÈïøÊúüÂùáÁ∫ø
                if (latest[f'MA{self.short_period}'] > latest[f'MA{self.long_period}'] and 
                    previous[f'MA{self.short_period}'] <= previous[f'MA{self.long_period}']):
                    return 'BUY'
                
                # Ê≠ªÂèâÔºöÁü≠ÊúüÂùáÁ∫ø‰∏ãÁ©øÈïøÊúüÂùáÁ∫ø
                elif (latest[f'MA{self.short_period}'] < latest[f'MA{self.long_period}'] and 
                      previous[f'MA{self.short_period}'] >= previous[f'MA{self.long_period}']):
                    return 'SELL'
                
                return 'HOLD'
            
        except Exception as e:
            logger.error(f"‚ùå ËÆ°ÁÆóÂèåÂùáÁ∫ø‰ø°Âè∑Â§±Ë¥•: {e}")
        
        return 'HOLD'

class RSIStrategy(BaseStrategy):
    """RSIÁ≠ñÁï•"""
    
    def __init__(self, account_id, stock_pool, rsi_period=14, oversold=30, overbought=70):
        super().__init__(account_id, stock_pool)
        self.rsi_period = rsi_period
        self.oversold = oversold
        self.overbought = overbought
        
    def calculate_rsi(self, stock_code):
        """ËÆ°ÁÆóRSIÊåáÊ†á"""
        try:
            # Ëé∑ÂèñÂéÜÂè≤Êï∞ÊçÆ
            data = self.easy_xt.get_price(
                codes=stock_code,
                period='1d',
                count=self.rsi_period + 20
            )
            
            if data is not None and not data.empty:
                # ËÆ°ÁÆóRSI
                delta = data['close'].diff()
                gain = delta.where(delta > 0, 0)
                loss = -delta.where(delta < 0, 0)
                avg_gain = gain.rolling(window=self.rsi_period).mean()
                avg_loss = loss.rolling(window=self.rsi_period).mean()
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))
                
                latest_rsi = rsi.iloc[-1]
                
                if latest_rsi < self.oversold:
                    return 'BUY', latest_rsi
                elif latest_rsi > self.overbought:
                    return 'SELL', latest_rsi
                else:
                    return 'HOLD', latest_rsi
                    
        except Exception as e:
            logger.error(f"‚ùå ËÆ°ÁÆóRSIÂ§±Ë¥•: {e}")
        
        return 'HOLD', 0

class GridStrategy(BaseStrategy):
    """ÁΩëÊ†ºÁ≠ñÁï•"""
    
    def __init__(self, account_id, stock_code, base_price, grid_size=0.02, grid_num=10):
        super().__init__(account_id, [stock_code])
        self.stock_code = stock_code
        self.base_price = base_price
        self.grid_size = grid_size
        self.grid_num = grid_num
        self.grid_levels = []
        
    def setup_grid(self):
        """ËÆæÁΩÆÁΩëÊ†º"""
        # ËÆ°ÁÆóÁΩëÊ†º‰ª∑‰Ωç
        for i in range(-self.grid_num//2, self.grid_num//2 + 1):
            price = self.base_price * (1 + i * self.grid_size)
            self.grid_levels.append(round(price, 2))
        
        self.grid_levels.sort()
        logger.info(f"üìä ÁΩëÊ†º‰ª∑‰ΩçËÆæÁΩÆÂÆåÊàê: {self.grid_levels}")

class RiskManager:
    """È£éÈô©ÁÆ°ÁêÜÂô®"""
    
    def __init__(self, max_position_ratio=0.1, max_loss_ratio=0.02, max_daily_trades=10):
        self.max_position_ratio = max_position_ratio
        self.max_loss_ratio = max_loss_ratio
        self.max_daily_trades = max_daily_trades
        self.daily_trades = 0
        
    def check_position_limit(self, account_info, stock_code, quantity, price):
        """Ê£ÄÊü•‰ªì‰ΩçÈôêÂà∂"""
        try:
            total_asset = account_info.get('total_asset', 0)
            position_value = quantity * price
            position_ratio = position_value / total_asset if total_asset > 0 else 0
            
            if position_ratio > self.max_position_ratio:
                logger.warning(f"‚ö†Ô∏è ‰ªì‰ΩçË∂ÖÈôê: {position_ratio:.2%} > {self.max_position_ratio:.2%}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå ‰ªì‰ΩçÊ£ÄÊü•Â§±Ë¥•: {e}")
            return True
    
    def check_stop_loss(self, position_info, current_price):
        """Ê£ÄÊü•Ê≠¢Êçü"""
        try:
            avg_price = position_info.get('avg_price', 0)
            if avg_price <= 0:
                return False
                
            loss_ratio = (avg_price - current_price) / avg_price
            
            if loss_ratio > self.max_loss_ratio:
                logger.warning(f"üö® Ëß¶ÂèëÊ≠¢Êçü: ‰∫èÊçü{loss_ratio:.2%} > {self.max_loss_ratio:.2%}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Ê≠¢ÊçüÊ£ÄÊü•Â§±Ë¥•: {e}")
            return False

class BacktestEngine:
    """ÂõûÊµãÂºïÊìé"""
    
    def __init__(self, strategy_class, strategy_params, start_date, end_date, initial_capital=100000):
        self.strategy_class = strategy_class
        self.strategy_params = strategy_params
        self.start_date = start_date
        self.end_date = end_date
        self.initial_capital = initial_capital
        self.results = {}
        
    def run_backtest(self):
        """ËøêË°åÂõûÊµã"""
        logger.info(f"üìä ÂºÄÂßãÂõûÊµã: {self.start_date} Âà∞ {self.end_date}")
        
        # ËøôÈáåÊòØÂõûÊµãÁöÑÊ†∏ÂøÉÈÄªËæë
        # ÂÆûÈôÖÂÆûÁé∞ÈúÄË¶ÅËé∑ÂèñÂéÜÂè≤Êï∞ÊçÆÂπ∂Ê®°Êãü‰∫§Êòì
        
        # Ê®°ÊãüÁªìÊûú
        self.results = {
            'total_return': 0.15,
            'annual_return': 0.12,
            'max_drawdown': 0.08,
            'sharpe_ratio': 1.2,
            'win_rate': 0.65
        }
        
        return self.results

def get_stock_basic_info(stock_codes):
    """Ëé∑ÂèñËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØ"""
    easy_xt = EasyXT()
    
    if not easy_xt.init_data():
        logger.error("‚ùå Êï∞ÊçÆÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•")
        return {}
    
    logger.info("‚úì Êï∞ÊçÆÊúçÂä°ËøûÊé•ÊàêÂäü")
    
    # ËÇ°Á•®ÂêçÁß∞Êò†Â∞ÑÔºàÂÆûÈôÖÂ∫îÁî®‰∏≠ÂèØ‰ª•‰ªéÊï∞ÊçÆÂ∫ìÊàñAPIËé∑ÂèñÔºâ
    stock_names = {
        '000001.SZ': 'Âπ≥ÂÆâÈì∂Ë°å',
        '000002.SZ': '‰∏áÁßëA',
        '600000.SH': 'Êµ¶ÂèëÈì∂Ë°å',
        '600036.SH': 'ÊãõÂïÜÈì∂Ë°å',
        '000858.SZ': '‰∫îÁ≤ÆÊ∂≤'
    }
    
    results = {}
    
    for stock_code in stock_codes:
        try:
            # Ëé∑ÂèñÂÆûÊó∂‰ª∑Ê†ºÊï∞ÊçÆ
            price_data = easy_xt.get_current_price([stock_code])
            
            if price_data is not None and not price_data.empty:
                tick = price_data.iloc[0]
                
                # Â∞ùËØï‰∏çÂêåÁöÑÂ≠óÊÆµÂêçÔºåÂõ†‰∏∫‰∏çÂêåÊï∞ÊçÆÊ∫êÂèØËÉΩ‰ΩøÁî®‰∏çÂêåÁöÑÂ≠óÊÆµÂêç
                current_price = 0
                change_pct = 0
                volume = 0
                
                # Â∞ùËØïËé∑Âèñ‰ª∑Ê†ºÂ≠óÊÆµ
                for price_field in ['lastPrice', 'last_price', 'close', 'price', 'current_price']:
                    if price_field in tick and pd.notna(tick[price_field]):
                        current_price = float(tick[price_field])
                        break
                
                # Â∞ùËØïËé∑ÂèñÊ∂®Ë∑åÂπÖÂ≠óÊÆµ
                for pct_field in ['pctChg', 'pct_chg', 'change_pct', 'change_percent']:
                    if pct_field in tick and pd.notna(tick[pct_field]):
                        change_pct = float(tick[pct_field])
                        break
                
                # Â∞ùËØïËé∑ÂèñÊàê‰∫§ÈáèÂ≠óÊÆµ
                for vol_field in ['volume', 'vol', 'trade_volume']:
                    if vol_field in tick and pd.notna(tick[vol_field]):
                        volume = int(tick[vol_field])
                        break
                
                # Â¶ÇÊûú‰ª∑Ê†º‰ªç‰∏∫0ÔºåÂ∞ùËØï‰ΩøÁî®ÂéÜÂè≤Êï∞ÊçÆËé∑ÂèñÊúÄÊñ∞‰ª∑Ê†º
                if current_price == 0:
                    try:
                        hist_data = easy_xt.get_price(codes=stock_code, period='1d', count=1)
                        if hist_data is not None and not hist_data.empty:
                            current_price = float(hist_data.iloc[-1]['close'])
                            # ËÆ°ÁÆóÊ∂®Ë∑åÂπÖÔºàÂ¶ÇÊûúÊúâÂâç‰∏ÄÊó•Êï∞ÊçÆÔºâ
                            if len(hist_data) > 1:
                                prev_close = float(hist_data.iloc[-2]['close'])
                                change_pct = ((current_price - prev_close) / prev_close) * 100
                    except Exception as hist_e:
                        logger.warning(f"‚ö†Ô∏è Ëé∑Âèñ {stock_code} ÂéÜÂè≤Êï∞ÊçÆÂ§±Ë¥•: {hist_e}")
                
                results[stock_code] = {
                    'name': stock_names.get(stock_code, 'Êú™Áü•ËÇ°Á•®'),
                    'current_price': current_price,
                    'change_pct': change_pct,
                    'volume': volume,
                    'turnover': tick.get('amount', tick.get('turnover', 0))
                }
                
                # ÊâìÂç∞Ë∞ÉËØï‰ø°ÊÅØ
                logger.info(f"üìä {stock_code} Êï∞ÊçÆÂ≠óÊÆµ: {list(tick.index)}")
                
            else:
                logger.warning(f"‚ö†Ô∏è {stock_code} Êú™Ëé∑ÂèñÂà∞Êï∞ÊçÆ")
                results[stock_code] = {
                    'name': stock_names.get(stock_code, 'Êú™Áü•ËÇ°Á•®'),
                    'current_price': 0,
                    'change_pct': 0,
                    'volume': 0,
                    'turnover': 0
                }
                
        except Exception as e:
            logger.error(f"‚ùå Ëé∑Âèñ {stock_code} ‰ø°ÊÅØÂ§±Ë¥•: {e}")
            results[stock_code] = {
                'name': stock_names.get(stock_code, 'Êú™Áü•ËÇ°Á•®'),
                'current_price': 0,
                'change_pct': 0,
                'volume': 0,
                'turnover': 0
            }
    
    return results

def calculate_technical_indicators(stock_code):
    """ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á"""
    easy_xt = EasyXT()
    
    if not easy_xt.init_data():
        logger.error("‚ùå Êï∞ÊçÆÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•")
        return None
    
    try:
        # Ëé∑ÂèñÂéÜÂè≤Êï∞ÊçÆ
        data = easy_xt.get_price(codes=stock_code, period='1d', count=50)
        
        if data is not None and not data.empty:
            indicators = {}
            
            # ÁßªÂä®Âπ≥ÂùáÁ∫ø
            indicators['MA5'] = data['close'].rolling(5).mean()
            indicators['MA10'] = data['close'].rolling(10).mean()
            indicators['MA20'] = data['close'].rolling(20).mean()
            
            # MACD
            exp1 = data['close'].ewm(span=12).mean()
            exp2 = data['close'].ewm(span=26).mean()
            indicators['MACD'] = exp1 - exp2
            indicators['Signal'] = indicators['MACD'].ewm(span=9).mean()
            
            # Â∏ÉÊûóÂ∏¶
            ma20 = data['close'].rolling(20).mean()
            std20 = data['close'].rolling(20).std()
            indicators['Upper_Band'] = ma20 + (std20 * 2)
            indicators['Lower_Band'] = ma20 - (std20 * 2)
            
            # RSI
            delta = data['close'].diff()
            gain = delta.where(delta > 0, 0)
            loss = -delta.where(delta < 0, 0)
            avg_gain = gain.rolling(window=14).mean()
            avg_loss = loss.rolling(window=14).mean()
            rs = avg_gain / avg_loss
            indicators['RSI'] = 100 - (100 / (1 + rs))
            
            return indicators
            
    except Exception as e:
        logger.error(f"‚ùå ËÆ°ÁÆóÊäÄÊúØÊåáÊ†áÂ§±Ë¥•: {e}")
    
    return None

def interactive_demo():
    """‰∫§‰∫íÂºèÊºîÁ§∫"""
    print("üéì Á≠ñÁï•ÂºÄÂèëÂ≠¶‰π†ÂÆû‰æã - ‰∫§‰∫íÂºèÂ≠¶‰π†Áâà")
    print("=" * 70)
    print("üìö Êú¨ÊïôÁ®ãÂ∞ÜÈÄêÊ≠•ÊºîÁ§∫ÈáèÂåñÁ≠ñÁï•ÂºÄÂèëÁöÑÂêÑ‰∏™ÁéØËäÇ")
    print("üí° ÊØè‰∏™Ê≠•È™§ÈÉΩÈúÄË¶ÅÊÇ®ÊåâÂõûËΩ¶ÈîÆÁ°ÆËÆ§ÔºåÊñπ‰æøÂ≠¶‰π†ÁêÜËß£")
    print("üéØ Â≠¶‰π†ÂÆåÊàêÂêéÔºåÊÇ®Â∞ÜÊéåÊè°ÂÆåÊï¥ÁöÑÈáèÂåñ‰∫§ÊòìÂºÄÂèëÊµÅÁ®ã")
    wait_for_user_input("ÂáÜÂ§áÂºÄÂßãÂ≠¶‰π†ÔºüÊåâÂõûËΩ¶ÈîÆÂºÄÂßã...")
    
    # Ê≠•È™§1: Ëé∑ÂèñËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØ
    print_section_header(1, "Ëé∑ÂèñËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØ", "‰∫ÜËß£Â¶Ç‰ΩïËé∑ÂèñËÇ°Á•®ÁöÑÂü∫Êú¨‰ø°ÊÅØÂíåÂÆûÊó∂Êï∞ÊçÆ")
    print("üìñ Ê∂âÂèäÁü•ËØÜÔºöEasyXTÊï∞ÊçÆÊé•Âè£„ÄÅËÇ°Á•®‰ª£Á†ÅËßÑËåÉ„ÄÅÂÆûÊó∂Ë°åÊÉÖËé∑Âèñ")
    wait_for_user_input("ÂºÄÂßãÊºîÁ§∫Ëé∑ÂèñËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØÔºü")
    
    stock_codes = ['000001.SZ', '000002.SZ', '600000.SH']
    print(f"\nüìä Â∞ÜËé∑Âèñ‰ª•‰∏ãËÇ°Á•®ÁöÑÂü∫Êú¨‰ø°ÊÅØÔºö{stock_codes}")
    
    try:
        basic_info = get_stock_basic_info(stock_codes)
        print("\nüìà ËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØËé∑ÂèñÁªìÊûúÔºö")
        print("-" * 60)
        for code, info in basic_info.items():
            if info:
                name = info.get('name', 'Êú™Áü•')
                price = info.get('current_price', 0)
                change = info.get('change_pct', 0)
                volume = info.get('volume', 0)
                print(f"  üìå {code}: {name}")
                print(f"     üí∞ ÂΩìÂâç‰ª∑Ê†º: {price:.2f}ÂÖÉ")
                print(f"     üìä Ê∂®Ë∑åÂπÖ: {change:+.2f}%")
                print(f"     üì¶ Êàê‰∫§Èáè: {volume:,}Êâã")
                print()
            else:
                print(f"  ‚ùå {code}: ‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•")
    except Exception as e:
        print(f"‚ùå Ëé∑ÂèñËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØÂ§±Ë¥•: {e}")
    
    wait_for_user_input("Ê≠•È™§1ÂÆåÊàêÔºÅÊÇ®Â∑≤Â≠¶‰ºöËé∑ÂèñËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØ„ÄÇÊåâÂõûËΩ¶ÈîÆÁªßÁª≠‰∏ã‰∏ÄÊ≠•...")
    
    # Ê≠•È™§2: ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á
    print_section_header(2, "ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á", "ÊéåÊè°Â∏∏Áî®ÊäÄÊúØÊåáÊ†áÁöÑËÆ°ÁÆóÊñπÊ≥ï")
    print("üìñ Ê∂âÂèäÁü•ËØÜÔºöÁßªÂä®Âπ≥ÂùáÁ∫ø„ÄÅMACD„ÄÅÂ∏ÉÊûóÂ∏¶„ÄÅRSIÁ≠âÊäÄÊúØÂàÜÊûêÊåáÊ†á")
    wait_for_user_input("ÂºÄÂßãÊºîÁ§∫ÊäÄÊúØÊåáÊ†áËÆ°ÁÆóÔºü")
    
    test_stock = '000001.SZ'
    print(f"\nüìä Â∞ÜËÆ°ÁÆó {test_stock} ÁöÑÊäÄÊúØÊåáÊ†á...")
    
    try:
        indicators = calculate_technical_indicators(test_stock)
        if indicators:
            print("\nüìà ÊäÄÊúØÊåáÊ†áËÆ°ÁÆóÁªìÊûúÔºö")
            print("-" * 60)
            for name, values in indicators.items():
                if hasattr(values, 'iloc') and len(values) > 0:
                    latest_value = values.iloc[-1]
                    if not pd.isna(latest_value):
                        print(f"  üìä {name}: {latest_value:.4f}")
                    else:
                        print(f"  ‚ö†Ô∏è {name}: Êï∞ÊçÆ‰∏çË∂≥")
            
            print("\nüí° ÊäÄÊúØÊåáÊ†áËØ¥ÊòéÔºö")
            print("  ‚Ä¢ MA5/MA10/MA20: 5Êó•/10Êó•/20Êó•ÁßªÂä®Âπ≥ÂùáÁ∫ø")
            print("  ‚Ä¢ MACD: ÊåáÊï∞Âπ≥ÊªëÂºÇÂêåÁßªÂä®Âπ≥ÂùáÁ∫ø")
            print("  ‚Ä¢ Upper_Band/Lower_Band: Â∏ÉÊûóÂ∏¶‰∏äËΩ®/‰∏ãËΩ®")
            print("  ‚Ä¢ RSI: Áõ∏ÂØπÂº∫Âº±ÊåáÊï∞Ôºà0-100Ôºå30‰ª•‰∏ãË∂ÖÂçñÔºå70‰ª•‰∏äË∂Ö‰π∞Ôºâ")
        else:
            print("‚ùå ÊäÄÊúØÊåáÊ†áËÆ°ÁÆóÂ§±Ë¥•")
    except Exception as e:
        print(f"‚ùå ÊäÄÊúØÊåáÊ†áËÆ°ÁÆóÂá∫Èîô: {e}")
    
    wait_for_user_input("Ê≠•È™§2ÂÆåÊàêÔºÅÊÇ®Â∑≤Â≠¶‰ºöËÆ°ÁÆóÊäÄÊúØÊåáÊ†á„ÄÇÊåâÂõûËΩ¶ÈîÆÁªßÁª≠‰∏ã‰∏ÄÊ≠•...")
    
    # Ê≠•È™§3: Á≠ñÁï•Á±ªÊºîÁ§∫
    print_section_header(3, "Á≠ñÁï•Á±ªÊºîÁ§∫", "‰∫ÜËß£‰∏çÂêåÁ±ªÂûãÁöÑÈáèÂåñÁ≠ñÁï•")
    print("üìñ Ê∂âÂèäÁü•ËØÜÔºöÂèåÂùáÁ∫øÁ≠ñÁï•„ÄÅRSIÁ≠ñÁï•„ÄÅÁΩëÊ†ºÁ≠ñÁï•ÁöÑÂéüÁêÜÂíåÂÆûÁé∞")
    wait_for_user_input("ÂºÄÂßãÊºîÁ§∫Á≠ñÁï•Á±ªÂàõÂª∫Ôºü")
    
    demo_account_id = "demo_account"
    stock_pool = ['000001.SZ', '000002.SZ']
    
    try:
        # 3.1 ÂèåÂùáÁ∫øÁ≠ñÁï•
        print_subsection("3.1 ÂàõÂª∫ÂèåÂùáÁ∫øÁ≠ñÁï•")
        print("üìö Á≠ñÁï•ÂéüÁêÜÔºöÁü≠ÊúüÂùáÁ∫ø‰∏äÁ©øÈïøÊúüÂùáÁ∫øÊó∂‰π∞ÂÖ•ÔºàÈáëÂèâÔºâÔºå‰∏ãÁ©øÊó∂ÂçñÂá∫ÔºàÊ≠ªÂèâÔºâ")
        print("üéØ ÈÄÇÁî®Âú∫ÊôØÔºöË∂ãÂäøÊÄßË°åÊÉÖÔºåËÉΩÂ§üÊçïÊçâ‰∏≠ÈïøÊúüË∂ãÂäø")
        
        ma_strategy = MovingAverageStrategy(demo_account_id, stock_pool, short_period=5, long_period=20)
        print(f"‚úÖ ÂèåÂùáÁ∫øÁ≠ñÁï•ÂàõÂª∫ÊàêÂäü")
        print(f"   üìä ËÇ°Á•®Ê±†: {ma_strategy.stock_pool}")
        print(f"   ‚è±Ô∏è Áü≠ÊúüÂë®Êúü: {ma_strategy.short_period}Â§©")
        print(f"   ‚è±Ô∏è ÈïøÊúüÂë®Êúü: {ma_strategy.long_period}Â§©")
        
        wait_for_user_input("ÁªßÁª≠ÊºîÁ§∫RSIÁ≠ñÁï•Ôºü")
        
        # 3.2 RSIÁ≠ñÁï•
        print_subsection("3.2 ÂàõÂª∫RSIÁ≠ñÁï•")
        print("üìö Á≠ñÁï•ÂéüÁêÜÔºöRSI‰Ωé‰∫é30Êó∂‰π∞ÂÖ•ÔºàË∂ÖÂçñÔºâÔºåÈ´ò‰∫é70Êó∂ÂçñÂá∫ÔºàË∂Ö‰π∞Ôºâ")
        print("üéØ ÈÄÇÁî®Âú∫ÊôØÔºöÈúáËç°Ë°åÊÉÖÔºåÂà©Áî®Ë∂Ö‰π∞Ë∂ÖÂçñÁé∞Ë±°ËøõË°åÂèçËΩ¨‰∫§Êòì")
        
        rsi_strategy = RSIStrategy(demo_account_id, stock_pool, rsi_period=14, oversold=30, overbought=70)
        print(f"‚úÖ RSIÁ≠ñÁï•ÂàõÂª∫ÊàêÂäü")
        print(f"   ‚è±Ô∏è RSIÂë®Êúü: {rsi_strategy.rsi_period}Â§©")
        print(f"   üìâ Ë∂ÖÂçñÈòàÂÄº: {rsi_strategy.oversold}")
        print(f"   üìà Ë∂Ö‰π∞ÈòàÂÄº: {rsi_strategy.overbought}")
        
        wait_for_user_input("ÁªßÁª≠ÊºîÁ§∫ÁΩëÊ†ºÁ≠ñÁï•Ôºü")
        
        # 3.3 ÁΩëÊ†ºÁ≠ñÁï•
        print_subsection("3.3 ÂàõÂª∫ÁΩëÊ†ºÁ≠ñÁï•")
        print("üìö Á≠ñÁï•ÂéüÁêÜÔºöÂú®Âü∫ÂáÜ‰ª∑Ê†º‰∏ä‰∏ãËÆæÁΩÆÂ§ö‰∏™‰π∞ÂçñÁΩëÊ†ºÔºå‰Ωé‰π∞È´òÂçñ")
        print("üéØ ÈÄÇÁî®Âú∫ÊôØÔºöÈúáËç°Ë°åÊÉÖÔºåÈÄöËøáÈ¢ëÁπÅ‰∫§ÊòìËé∑Âèñ‰ª∑Â∑ÆÊî∂Áõä")
        
        grid_strategy = GridStrategy(demo_account_id, '000001.SZ', base_price=10.0, grid_size=0.02, grid_num=10)
        grid_strategy.setup_grid()
        print(f"‚úÖ ÁΩëÊ†ºÁ≠ñÁï•ÂàõÂª∫ÊàêÂäü")
        print(f"   üí∞ Âü∫ÂáÜ‰ª∑Ê†º: {grid_strategy.base_price}ÂÖÉ")
        print(f"   üìè ÁΩëÊ†ºÈó¥Ë∑ù: {grid_strategy.grid_size*100}%")
        print(f"   üî¢ ÁΩëÊ†ºÊï∞Èáè: {grid_strategy.grid_num}‰∏™")
        print(f"   üìä ÁΩëÊ†º‰ª∑‰Ωç: {grid_strategy.grid_levels[:5]}...{grid_strategy.grid_levels[-5:]}")
        
    except Exception as e:
        print(f"‚ùå Á≠ñÁï•ÂàõÂª∫Âá∫Èîô: {e}")
    
    wait_for_user_input("Ê≠•È™§3ÂÆåÊàêÔºÅÊÇ®Â∑≤Â≠¶‰ºöÂàõÂª∫‰∏çÂêåÁ±ªÂûãÁöÑÁ≠ñÁï•„ÄÇÊåâÂõûËΩ¶ÈîÆÁªßÁª≠‰∏ã‰∏ÄÊ≠•...")
    
    # Ê≠•È™§4: È£éÈô©ÁÆ°ÁêÜÊºîÁ§∫
    print_section_header(4, "È£éÈô©ÁÆ°ÁêÜÊºîÁ§∫", "ÊéåÊè°ÈáèÂåñ‰∫§Êòì‰∏≠ÁöÑÈ£éÈô©ÊéßÂà∂ÊñπÊ≥ï")
    print("üìñ Ê∂âÂèäÁü•ËØÜÔºö‰ªì‰ΩçÁÆ°ÁêÜ„ÄÅÊ≠¢ÊçüÊú∫Âà∂„ÄÅ‰∫§ÊòìÈ¢ëÁéáÊéßÂà∂")
    wait_for_user_input("ÂºÄÂßãÊºîÁ§∫È£éÈô©ÁÆ°ÁêÜÔºü")
    
    try:
        risk_manager = RiskManager(max_position_ratio=0.1, max_loss_ratio=0.02, max_daily_trades=10)
        print("\nüõ°Ô∏è È£éÈô©ÁÆ°ÁêÜÂô®ÈÖçÁΩÆÔºö")
        print("-" * 50)
        print(f"  üìä ÊúÄÂ§ßÂçïËÇ°‰ªì‰ΩçÊØî‰æã: {risk_manager.max_position_ratio:.1%}")
        print(f"  üö® ÊúÄÂ§ß‰∫èÊçüÊØî‰æã: {risk_manager.max_loss_ratio:.1%}")
        print(f"  üîÑ ÊØèÊó•ÊúÄÂ§ß‰∫§ÊòìÊ¨°Êï∞: {risk_manager.max_daily_trades}")
        
        # Ê®°Êãü‰ªì‰ΩçÊ£ÄÊü•
        print_subsection("‰ªì‰ΩçÊ£ÄÊü•ÊºîÁ§∫")
        demo_account = {'total_asset': 100000}
        print(f"üìà Ê®°ÊãüË¥¶Êà∑ÊÄªËµÑ‰∫ß: {demo_account['total_asset']:,}ÂÖÉ")
        print(f"üìã ËÆ°Âàí‰π∞ÂÖ•: 000001.SZ, 1000ËÇ°, 10.0ÂÖÉ/ËÇ°")
        print(f"üí∞ ‰π∞ÂÖ•ÈáëÈ¢ù: {1000 * 10.0:,}ÂÖÉ")
        print(f"üìä ‰ªì‰ΩçÂç†ÊØî: {(1000 * 10.0 / demo_account['total_asset']):.1%}")
        
        demo_check = risk_manager.check_position_limit(demo_account, "000001.SZ", 1000, 10.0)
        print(f"üîç ‰ªì‰ΩçÊ£ÄÊü•ÁªìÊûú: {'‚úÖ ÈÄöËøá' if demo_check else '‚ùå ‰∏çÈÄöËøá'}")
        
        # Ê®°ÊãüÊ≠¢ÊçüÊ£ÄÊü•
        print_subsection("Ê≠¢ÊçüÊ£ÄÊü•ÊºîÁ§∫")
        position_info = {'stock_code': '000001.SZ', 'avg_price': 10.0}
        current_price = 9.5
        loss_pct = ((position_info['avg_price'] - current_price) / position_info['avg_price'] * 100)
        
        print(f"üìà ÊåÅ‰ªìÊàêÊú¨: {position_info['avg_price']}ÂÖÉ")
        print(f"üí∞ ÂΩìÂâç‰ª∑Ê†º: {current_price}ÂÖÉ")
        print(f"üìâ ÊµÆÂä®‰∫èÊçü: {loss_pct:.2f}%")
        print(f"üö® Ê≠¢ÊçüÁ∫ø: {risk_manager.max_loss_ratio:.1%}")
        
        stop_loss_triggered = risk_manager.check_stop_loss(position_info, current_price)
        print(f"üîç Ê≠¢ÊçüÊ£ÄÊü•ÁªìÊûú: {'üö® Ëß¶ÂèëÊ≠¢Êçü' if stop_loss_triggered else '‚úÖ Ê≠£Â∏∏'}")
        
        print("\nüí° È£éÈô©ÁÆ°ÁêÜË¶ÅÁÇπÔºö")
        print("  ‚Ä¢ ‰∏•Ê†ºÊéßÂà∂ÂçïËÇ°‰ªì‰ΩçÔºåÈÅøÂÖçËøáÂ∫¶ÈõÜ‰∏≠")
        print("  ‚Ä¢ ËÆæÁΩÆÊ≠¢ÊçüÁ∫øÔºåÂèäÊó∂Ê≠¢Êçü‰øùÊä§ËµÑÈáë")
        print("  ‚Ä¢ ÈôêÂà∂‰∫§ÊòìÈ¢ëÁéáÔºåÈÅøÂÖçËøáÂ∫¶‰∫§Êòì")
        print("  ‚Ä¢ ÂÆöÊúüËØÑ‰º∞Á≠ñÁï•Ë°®Áé∞ÔºåÂèäÊó∂Ë∞ÉÊï¥")
        
    except Exception as e:
        print(f"‚ùå È£éÈô©ÁÆ°ÁêÜÊºîÁ§∫Âá∫Èîô: {e}")
    
    wait_for_user_input("Ê≠•È™§4ÂÆåÊàêÔºÅÊÇ®Â∑≤Â≠¶‰ºöÈ£éÈô©ÁÆ°ÁêÜÊñπÊ≥ï„ÄÇÊåâÂõûËΩ¶ÈîÆÁªßÁª≠‰∏ã‰∏ÄÊ≠•...")
    
    # Ê≠•È™§5: ÂõûÊµãÂºïÊìéÊºîÁ§∫
    print_section_header(5, "ÂõûÊµãÂºïÊìéÊºîÁ§∫", "‰∫ÜËß£Á≠ñÁï•ÂõûÊµãÁöÑÂü∫Êú¨ÂéüÁêÜÂíåÊñπÊ≥ï")
    print("üìñ Ê∂âÂèäÁü•ËØÜÔºöÂéÜÂè≤Êï∞ÊçÆÂõûÊµã„ÄÅÁ≠ñÁï•ÊÄßËÉΩËØÑ‰º∞„ÄÅÂõûÊµãÊåáÊ†áÂàÜÊûê")
    wait_for_user_input("ÂºÄÂßãÊºîÁ§∫ÂõûÊµãÂºïÊìéÔºü")
    
    try:
        strategy_params = {
            'account_id': demo_account_id,
            'stock_pool': stock_pool,
            'short_period': 5,
            'long_period': 20
        }
        
        backtest_engine = BacktestEngine(
            strategy_class=MovingAverageStrategy,
            strategy_params=strategy_params,
            start_date='20240101',
            end_date='20241201',
            initial_capital=100000
        )
        
        print("\nüìä ÂõûÊµãÂºïÊìéÈÖçÁΩÆÔºö")
        print("-" * 50)
        print(f"  üéØ Á≠ñÁï•Á±ªÂûã: ÂèåÂùáÁ∫øÁ≠ñÁï•")
        print(f"  üìÖ ÂõûÊµãÊúüÈó¥: {backtest_engine.start_date} Âà∞ {backtest_engine.end_date}")
        print(f"  üí∞ ÂàùÂßãËµÑÈáë: {backtest_engine.initial_capital:,}ÂÖÉ")
        print(f"  üìà ËÇ°Á•®Ê±†: {strategy_params['stock_pool']}")
        print(f"  ‚è±Ô∏è Áü≠ÊúüÂùáÁ∫ø: {strategy_params['short_period']}Â§©")
        print(f"  ‚è±Ô∏è ÈïøÊúüÂùáÁ∫ø: {strategy_params['long_period']}Â§©")
        
        print_subsection("Ê®°ÊãüÂõûÊµãÁªìÊûú")
        print("üí° Ê≥®ÊÑè: ‰ª•‰∏ã‰∏∫Ê®°ÊãüÊï∞ÊçÆÔºåÂÆûÈôÖÂõûÊµãÈúÄË¶ÅËøûÊé•ÁúüÂÆûÊï∞ÊçÆÊ∫ê")
        
        # Ê®°ÊãüÂõûÊµãÁªìÊûú
        results = {
            'total_return': 15.2,
            'annual_return': 12.8,
            'max_drawdown': 8.5,
            'sharpe_ratio': 1.25,
            'win_rate': 65.3
        }
        
        print(f"  üìà ÊÄªÊî∂ÁõäÁéá: {results['total_return']:+.1f}%")
        print(f"  üìä Âπ¥ÂåñÊî∂ÁõäÁéá: {results['annual_return']:+.1f}%")
        print(f"  üìâ ÊúÄÂ§ßÂõûÊí§: {results['max_drawdown']:.1f}%")
        print(f"  üìè Â§èÊôÆÊØîÁéá: {results['sharpe_ratio']:.2f}")
        print(f"  üéØ ËÉúÁéá: {results['win_rate']:.1f}%")
        
        print("\nüí° ÂõûÊµãÊåáÊ†áËØ¥ÊòéÔºö")
        print("  ‚Ä¢ ÊÄªÊî∂ÁõäÁéá: Á≠ñÁï•Âú®ÂõûÊµãÊúüÈó¥ÁöÑÊÄªÊî∂Áõä")
        print("  ‚Ä¢ Âπ¥ÂåñÊî∂ÁõäÁéá: ÊåâÂπ¥ËÆ°ÁÆóÁöÑÂπ≥ÂùáÊî∂ÁõäÁéá")
        print("  ‚Ä¢ ÊúÄÂ§ßÂõûÊí§: Á≠ñÁï•ËøêË°åÊúüÈó¥ÁöÑÊúÄÂ§ß‰∫èÊçüÂπÖÂ∫¶")
        print("  ‚Ä¢ Â§èÊôÆÊØîÁéá: È£éÈô©Ë∞ÉÊï¥ÂêéÁöÑÊî∂ÁõäÁéáÔºà>1‰∏∫‰ºòÁßÄÔºâ")
        print("  ‚Ä¢ ËÉúÁéá: ÁõàÂà©‰∫§ÊòìÂç†ÊÄª‰∫§ÊòìÊ¨°Êï∞ÁöÑÊØî‰æã")
        
    except Exception as e:
        print(f"‚ùå ÂõûÊµãÂºïÊìéÊºîÁ§∫Âá∫Èîô: {e}")
    
    wait_for_user_input("Ê≠•È™§5ÂÆåÊàêÔºÅÊÇ®Â∑≤Â≠¶‰ºöÂõûÊµãÂàÜÊûêÊñπÊ≥ï„ÄÇÊåâÂõûËΩ¶ÈîÆÁªßÁª≠...")
    
    # Ê≠•È™§6: È´òÁ∫ßÂäüËÉΩÊºîÁ§∫
    print_section_header(6, "È´òÁ∫ßÂäüËÉΩÊºîÁ§∫", "‰∫ÜËß£ÂÆûÈôÖ‰∫§Êòì‰∏≠ÁöÑÈ´òÁ∫ßÂäüËÉΩ")
    print("üìñ Ê∂âÂèäÁü•ËØÜÔºöÂÆûÊó∂ÁõëÊéß„ÄÅÁ≠ñÁï•ÁªÑÂêà„ÄÅÂèÇÊï∞‰ºòÂåñ")
    wait_for_user_input("ÂºÄÂßãÊºîÁ§∫È´òÁ∫ßÂäüËÉΩÔºü")
    
    print_subsection("6.1 ÂÆûÊó∂ÁõëÊéßÂäüËÉΩ")
    print("üîç ÂäüËÉΩÊèèËø∞ÔºöÂÆûÊó∂Ëé∑ÂèñËÇ°Á•®‰ª∑Ê†ºÔºåÁõëÊéßÂ∏ÇÂú∫ÂèòÂåñ")
    print("üéØ Â∫îÁî®Âú∫ÊôØÔºöÁ≠ñÁï•‰ø°Âè∑Á°ÆËÆ§„ÄÅÈ£éÈô©ÁõëÊéß„ÄÅÂºÇÂ∏∏Ê£ÄÊµã")
    print("üí° ÂÆûÁé∞ÊñπÂºèÔºöÂÆöÊó∂Ëé∑ÂèñË°åÊÉÖÊï∞ÊçÆÔºåËÆ°ÁÆóÊäÄÊúØÊåáÊ†áÔºåÂà§Êñ≠‰∫§Êòì‰ø°Âè∑")
    
    print_subsection("6.2 Á≠ñÁï•ÁªÑÂêàÂäüËÉΩ")
    print("üìä ÂäüËÉΩÊèèËø∞ÔºöÂêåÊó∂ËøêË°åÂ§ö‰∏™Á≠ñÁï•ÔºåÂàÜÊï£È£éÈô©")
    print("üéØ Â∫îÁî®Âú∫ÊôØÔºöÂèåÂùáÁ∫ø+RSIÁªÑÂêàÔºåÊèêÈ´ò‰ø°Âè∑ÂáÜÁ°ÆÊÄß")
    print("üí° ÂÆûÁé∞ÊñπÂºèÔºöÂ§öÁ≠ñÁï•Âπ∂Ë°åËøêË°åÔºå‰ø°Âè∑ÁªºÂêàÂà§Êñ≠")
    
    print_subsection("6.3 ÂèÇÊï∞‰ºòÂåñÂäüËÉΩ")
    print("‚öôÔ∏è ÂäüËÉΩÊèèËø∞ÔºöÈÄöËøáÂéÜÂè≤Êï∞ÊçÆ‰ºòÂåñÁ≠ñÁï•ÂèÇÊï∞")
    print("üéØ Â∫îÁî®Âú∫ÊôØÔºöÂØªÊâæÊúÄ‰Ω≥ÂùáÁ∫øÂë®Êúü„ÄÅRSIÈòàÂÄºÁ≠â")
    print("üí° ÂÆûÁé∞ÊñπÂºèÔºöÁΩëÊ†ºÊêúÁ¥¢„ÄÅÈÅó‰º†ÁÆóÊ≥ïÁ≠â‰ºòÂåñÊñπÊ≥ï")
    
    print_subsection("6.4 ÂÆûÁõò‰∫§ÊòìÊé•Âè£")
    print("üîÑ ÂäüËÉΩÊèèËø∞ÔºöËøûÊé•ÁúüÂÆû‰∫§ÊòìÁ≥ªÁªüÔºåÊâßË°å‰π∞ÂçñÊìç‰Ωú")
    print("üéØ Â∫îÁî®Âú∫ÊôØÔºöÁ≠ñÁï•‰ø°Âè∑ËΩ¨Âåñ‰∏∫ÂÆûÈôÖ‰∫§Êòì")
    print("üí° ÂÆûÁé∞ÊñπÂºèÔºöÈÄöËøáEasyXTÊé•Âè£ËøûÊé•ËøÖÊäïÂÆ¢Êà∑Á´Ø")
    
    wait_for_user_input("È´òÁ∫ßÂäüËÉΩ‰ªãÁªçÂÆåÊàêÔºÅÊåâÂõûËΩ¶ÈîÆÊü•ÁúãÂ≠¶‰π†ÊÄªÁªì...")
    
    # Â≠¶‰π†ÊÄªÁªì
    print("\n" + "=" * 70)
    print("üéì Â≠¶‰π†ÊÄªÁªì")
    print("=" * 70)
    print("üéâ ÊÅ≠ÂñúÊÇ®ÂÆåÊàê‰∫ÜÈáèÂåñÁ≠ñÁï•ÂºÄÂèëÁöÑÂÆåÊï¥Â≠¶‰π†ÔºÅ")
    
    print("\nüìö ÊÇ®Â∑≤ÁªèÊéåÊè°‰∫ÜÔºö")
    print("  1. ‚úÖ Ëé∑ÂèñËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØÂíåÂÆûÊó∂Êï∞ÊçÆ")
    print("  2. ‚úÖ ËÆ°ÁÆóÂ∏∏Áî®ÊäÄÊúØÊåáÊ†áÔºàMA„ÄÅMACD„ÄÅRSIÁ≠âÔºâ")
    print("  3. ‚úÖ ÂàõÂª∫‰∏çÂêåÁ±ªÂûãÁöÑ‰∫§ÊòìÁ≠ñÁï•")
    print("  4. ‚úÖ ÂÆûÊñΩÈ£éÈô©ÁÆ°ÁêÜÂíåÊéßÂà∂Êé™ÊñΩ")
    print("  5. ‚úÖ ‰ΩøÁî®ÂõûÊµãÂºïÊìéÈ™åËØÅÁ≠ñÁï•ÊïàÊûú")
    print("  6. ‚úÖ ‰∫ÜËß£È´òÁ∫ßÂäüËÉΩÂíåÂÆûÈôÖÂ∫îÁî®")
    
    print("\nüéØ EasyXTÊ°ÜÊû∂‰ºòÂäøÔºö")
    print("  ‚Ä¢ üîß Áªü‰∏ÄÁöÑAPIÊé•Âè£ÔºåÁÆÄÂåñÂºÄÂèëÊµÅÁ®ã")
    print("  ‚Ä¢ üõ°Ô∏è ÂÆåÂñÑÁöÑÈîôËØØÂ§ÑÁêÜÂíåÊó•ÂøóËÆ∞ÂΩï")
    print("  ‚Ä¢ üèóÔ∏è Ê®°ÂùóÂåñËÆæËÆ°ÔºåÊòì‰∫éÊâ©Â±ïÂíåÁª¥Êä§")
    print("  ‚Ä¢ üìä Â§öÁßçÁ≠ñÁï•Á±ªÂûãÔºåÊª°Ë∂≥‰∏çÂêåÈúÄÊ±Ç")
    print("  ‚Ä¢ üîí ÈõÜÊàêÈ£éÈô©ÁÆ°ÁêÜÔºå‰øùÈöú‰∫§ÊòìÂÆâÂÖ®")
    
    print("\n‚ö†Ô∏è ÂÆûÁõò‰∫§ÊòìÈáçË¶ÅÊèêÈÜíÔºö")
    print("  1. üîë ÈúÄË¶ÅÁúüÂÆûÁöÑ‰∫§ÊòìË¥¶Êà∑IDÂíåuserdata_pathÈÖçÁΩÆ")
    print("  2. üíª ÂøÖÈ°ªÂêØÂä®ËøÖÊäïÂÆ¢Êà∑Á´ØÂπ∂ÁôªÂΩï")
    print("  3. üß™ Âª∫ËÆÆÂÖàÂú®Ê®°ÊãüÁéØÂ¢É‰∏≠ÂÖÖÂàÜÊµãËØï")
    print("  4. ‚úÖ Á°Æ‰øùÁ≠ñÁï•ÈÄªËæëÊ≠£Á°Æ‰∏îÈ£éÈô©ÂèØÊéß")
    print("  5. üìä ÂÆöÊúüÁõëÊéßÁ≠ñÁï•Ë°®Áé∞Âπ∂ÂèäÊó∂Ë∞ÉÊï¥")
    
    print("\nüöÄ ËøõÈò∂Â≠¶‰π†Âª∫ËÆÆÔºö")
    print("  ‚Ä¢ üìà Â∞ùËØï‰øÆÊîπÁ≠ñÁï•ÂèÇÊï∞ÔºåËßÇÂØüÊïàÊûúÂèòÂåñ")
    print("  ‚Ä¢ üîÑ ÁªìÂêàÂ§ö‰∏™Á≠ñÁï•ÔºåÊûÑÂª∫Á≠ñÁï•ÁªÑÂêà")
    print("  ‚Ä¢ üìä ‰ΩøÁî®ÁúüÂÆûÂéÜÂè≤Êï∞ÊçÆËøõË°åÂõûÊµãÈ™åËØÅ")
    print("  ‚Ä¢ üß™ Âú®Ê®°ÊãüÁéØÂ¢É‰∏≠ÊµãËØïÂÆåÊï¥‰∫§ÊòìÊµÅÁ®ã")
    print("  ‚Ä¢ üìö Â≠¶‰π†Êõ¥Â§öÈ´òÁ∫ßÁ≠ñÁï•ÂíåÈ£éÈô©ÁÆ°ÁêÜÊäÄÂ∑ß")
    
    print("\nüí° Â≠¶‰π†ËµÑÊ∫êÊé®ËçêÔºö")
    print("  ‚Ä¢ üìñ Êü•ÁúãÂÖ∂‰ªñÂ≠¶‰π†ÂÆû‰æãÊñá‰ª∂")
    print("  ‚Ä¢ üîç Á†îÁ©∂EasyXT APIÊñáÊ°£")
    print("  ‚Ä¢ üìä Â≠¶‰π†Êõ¥Â§öÊäÄÊúØÂàÜÊûêÊåáÊ†á")
    print("  ‚Ä¢ üéØ ÂÖ≥Ê≥®ÈáèÂåñ‰∫§ÊòìÊúÄÊñ∞ÂèëÂ±ï")
    
    wait_for_user_input("üéì Â≠¶‰π†ÂÆåÊàêÔºÅÊÑüË∞¢ÊÇ®ÁöÑÂèÇ‰∏éÔºÅÊåâÂõûËΩ¶ÈîÆÈÄÄÂá∫...")
    
    print("\n" + "=" * 70)
    print("üéâ ÊÑüË∞¢ÊÇ®ÂÆåÊàêÈáèÂåñÁ≠ñÁï•ÂºÄÂèëÂ≠¶‰π†ÔºÅ")
    print("üí™ Áé∞Âú®ÊÇ®Â∑≤ÁªèÂÖ∑Â§á‰∫ÜÂºÄÂèëÈáèÂåñ‰∫§ÊòìÁ≠ñÁï•ÁöÑÂü∫Á°ÄËÉΩÂäõ")
    print("üöÄ Á•ùÊÇ®Âú®ÈáèÂåñ‰∫§ÊòìÁöÑÈÅìË∑Ø‰∏äÂèñÂæóÊàêÂäüÔºÅ")
    print("=" * 70)

if __name__ == "__main__":
    # ËøêË°å‰∫§‰∫íÂºèÊºîÁ§∫
    interactive_demo()