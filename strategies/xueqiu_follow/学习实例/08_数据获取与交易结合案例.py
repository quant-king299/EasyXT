"""
ËÇ°Á•®ÈáèÂåñ‰∫§ÊòìÂ≠¶‰π†Ê°à‰æã - Êï∞ÊçÆËé∑Âèñ‰∏éeasy_xt‰∫§ÊòìÁªìÂêà
ÂÆåÊï¥ÁöÑ‰ªéÊï∞ÊçÆËé∑ÂèñÂà∞‰∫§ÊòìÊâßË°åÁöÑÂ≠¶‰π†Ê°à‰æã

ÂäüËÉΩÂåÖÊã¨Ôºö
1. Êï∞ÊçÆËé∑ÂèñÊ®°Âùó (‰ΩøÁî®Áé∞ÊúâÊï∞ÊçÆÊàñakshare)
2. ÊäÄÊúØÊåáÊ†áËÆ°ÁÆó
3. ‰∫§Êòì‰ø°Âè∑ÁîüÊàê
4. easy_xt‰∫§ÊòìÊâßË°å
5. È£éÈô©ÁÆ°ÁêÜ
6. ‰∫§ÊòìÁõëÊéß

‰ΩúËÄÖÔºöCodeBuddy
Êó•ÊúüÔºö2025-01-09
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import sys
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Ê∑ªÂä†easy_xtË∑ØÂæÑ
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'easy_xt'))

try:
    from easy_xt.EasyXT import EasyXT
    EASY_XT_AVAILABLE = True
    print("‚úÖ easy_xtÊ®°ÂùóÂä†ËΩΩÊàêÂäü")
except ImportError as e:
    EASY_XT_AVAILABLE = False
    print(f"‚ö†Ô∏è easy_xtÊ®°ÂùóÊú™ÊâæÂà∞: {e}")
    print("üìù Â∞Ü‰ΩøÁî®Ê®°Êãü‰∫§ÊòìÊ®°Âºè")

# ËÆæÁΩÆ‰∏≠ÊñáÂ≠ó‰Ωì
plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

class TradingStrategy:
    """‰∫§ÊòìÁ≠ñÁï•Á±ª - Êï¥ÂêàÊï∞ÊçÆËé∑Âèñ„ÄÅ‰ø°Âè∑ÁîüÊàêÂíå‰∫§ÊòìÊâßË°å"""
    
    def __init__(self, use_real_trading=False):
        """
        ÂàùÂßãÂåñ‰∫§ÊòìÁ≠ñÁï•
        
        Args:
            use_real_trading (bool): ÊòØÂê¶‰ΩøÁî®ÁúüÂÆû‰∫§ÊòìÔºåÈªòËÆ§False‰ΩøÁî®Ê®°Êãü
        """
        self.use_real_trading = use_real_trading and EASY_XT_AVAILABLE
        self.data_dir = "data"
        self.log_dir = "logs"
        
        # ÂàõÂª∫ÂøÖË¶ÅÁõÆÂΩï
        for dir_path in [self.data_dir, self.log_dir]:
            if not os.path.exists(dir_path):
                os.makedirs(dir_path)
        
        # ÂàùÂßãÂåñ‰∫§ÊòìÊé•Âè£
        if self.use_real_trading:
            try:
                self.trader = EasyXT()
                print("‚úÖ EasyXT‰∫§ÊòìÊé•Âè£ÂàùÂßãÂåñÊàêÂäü")
            except Exception as e:
                print(f"‚ùå EasyXTÂàùÂßãÂåñÂ§±Ë¥•: {e}")
                self.use_real_trading = False
                print("üìù ÂàáÊç¢Âà∞Ê®°Êãü‰∫§ÊòìÊ®°Âºè")
        
        if not self.use_real_trading:
            self.trader = MockTrader()
            print("üìù ‰ΩøÁî®Ê®°Êãü‰∫§ÊòìÊ®°Âºè")
        
        # ‰∫§ÊòìÂèÇÊï∞
        self.position = {}  # ÊåÅ‰ªì‰ø°ÊÅØ
        self.cash = 100000  # ÂàùÂßãËµÑÈáë
        self.trade_log = []  # ‰∫§ÊòìËÆ∞ÂΩï
        
        print(f"üöÄ ‰∫§ÊòìÁ≠ñÁï•ÂàùÂßãÂåñÂÆåÊàê - {'ÁúüÂÆû‰∫§Êòì' if self.use_real_trading else 'Ê®°Êãü‰∫§Êòì'}Ê®°Âºè")
    
    def load_sample_data(self, stock_code='000001'):
        """
        Âä†ËΩΩÁ§∫‰æãÊï∞ÊçÆ (‰ΩøÁî®Áé∞ÊúâCSVÊñá‰ª∂ÊàñÁîüÊàêÊ®°ÊãüÊï∞ÊçÆ)
        
        Args:
            stock_code (str): ËÇ°Á•®‰ª£Á†Å
            
        Returns:
            pd.DataFrame: ËÇ°Á•®Êï∞ÊçÆ
        """
        try:
            # Â∞ùËØïÂä†ËΩΩÁé∞ÊúâÊï∞ÊçÆÊñá‰ª∂
            csv_files = [
                f"{stock_code}_SZ_data.csv",
                f"{stock_code}_SH_data.csv",
                f"{self.data_dir}/{stock_code}_historical.csv"
            ]
            
            for csv_file in csv_files:
                if os.path.exists(csv_file):
                    print(f"üìä Âä†ËΩΩÁé∞ÊúâÊï∞ÊçÆÊñá‰ª∂: {csv_file}")
                    data = pd.read_csv(csv_file, index_col=0, parse_dates=True)
                    
                    # Ê†áÂáÜÂåñÂàóÂêç
                    if 'close' not in data.columns and 'Êî∂Áõò' in data.columns:
                        data = data.rename(columns={
                            'ÂºÄÁõò': 'open', 'ÊúÄÈ´ò': 'high', 'ÊúÄ‰Ωé': 'low', 
                            'Êî∂Áõò': 'close', 'Êàê‰∫§Èáè': 'volume'
                        })
                    
                    if len(data) > 0:
                        print(f"‚úÖ ÊàêÂäüÂä†ËΩΩ {len(data)} Êù°Êï∞ÊçÆ")
                        return data
            
            # Â¶ÇÊûúÊ≤°ÊúâÁé∞ÊúâÊï∞ÊçÆÔºåÁîüÊàêÊ®°ÊãüÊï∞ÊçÆ
            print("üìä ÁîüÊàêÊ®°ÊãüËÇ°Á•®Êï∞ÊçÆ...")
            return self._generate_sample_data(stock_code)
            
        except Exception as e:
            print(f"‚ùå Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•: {e}")
            return self._generate_sample_data(stock_code)
    
    def _generate_sample_data(self, stock_code, days=60):
        """ÁîüÊàêÊ®°ÊãüËÇ°Á•®Êï∞ÊçÆ"""
        print(f"üé≤ ÁîüÊàê {days} Â§©ÁöÑÊ®°ÊãüÊï∞ÊçÆ...")
        
        # ÁîüÊàêÊó•ÊúüÂ∫èÂàó
        dates = pd.date_range(end=datetime.now(), periods=days, freq='D')
        
        # ÁîüÊàê‰ª∑Ê†ºÊï∞ÊçÆ (ÈöèÊú∫Ê∏∏Ëµ∞)
        np.random.seed(42)  # Âõ∫ÂÆöÈöèÊú∫ÁßçÂ≠ê‰ª•‰æøÂ§çÁé∞
        
        initial_price = 10.0
        returns = np.random.normal(0.001, 0.02, days)  # Êó•Êî∂ÁõäÁéá
        prices = [initial_price]
        
        for ret in returns[1:]:
            prices.append(prices[-1] * (1 + ret))
        
        # ÁîüÊàêOHLCÊï∞ÊçÆ
        data = []
        for i, (date, close) in enumerate(zip(dates, prices)):
            high = close * (1 + abs(np.random.normal(0, 0.01)))
            low = close * (1 - abs(np.random.normal(0, 0.01)))
            open_price = prices[i-1] if i > 0 else close
            volume = np.random.randint(1000000, 10000000)
            
            data.append({
                'open': open_price,
                'high': max(open_price, high, close),
                'low': min(open_price, low, close),
                'close': close,
                'volume': volume
            })
        
        df = pd.DataFrame(data, index=dates)
        
        # ‰øùÂ≠òÊ®°ÊãüÊï∞ÊçÆ
        filename = f"{self.data_dir}/{stock_code}_sample_data.csv"
        df.to_csv(filename)
        print(f"‚úÖ Ê®°ÊãüÊï∞ÊçÆÂ∑≤‰øùÂ≠òÂà∞ {filename}")
        
        return df
    
    def calculate_indicators(self, data):
        """
        ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á
        
        Args:
            data (pd.DataFrame): ÂéüÂßãËÇ°Á•®Êï∞ÊçÆ
            
        Returns:
            pd.DataFrame: Ê∑ªÂä†ÊäÄÊúØÊåáÊ†áÁöÑÊï∞ÊçÆ
        """
        print("üìà ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á...")
        
        try:
            # ÁßªÂä®Âπ≥ÂùáÁ∫ø
            data['MA5'] = data['close'].rolling(window=5).mean()
            data['MA10'] = data['close'].rolling(window=10).mean()
            data['MA20'] = data['close'].rolling(window=20).mean()
            
            # RSIÊåáÊ†á
            delta = data['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            data['RSI'] = 100 - (100 / (1 + rs))
            
            # MACDÊåáÊ†á
            exp1 = data['close'].ewm(span=12).mean()
            exp2 = data['close'].ewm(span=26).mean()
            data['MACD'] = exp1 - exp2
            data['MACD_signal'] = data['MACD'].ewm(span=9).mean()
            data['MACD_hist'] = data['MACD'] - data['MACD_signal']
            
            # Â∏ÉÊûóÂ∏¶
            data['BB_middle'] = data['close'].rolling(window=20).mean()
            bb_std = data['close'].rolling(window=20).std()
            data['BB_upper'] = data['BB_middle'] + (bb_std * 2)
            data['BB_lower'] = data['BB_middle'] - (bb_std * 2)
            
            # Êàê‰∫§ÈáèÊåáÊ†á
            data['VOL_MA5'] = data['volume'].rolling(window=5).mean()
            
            print("‚úÖ ÊäÄÊúØÊåáÊ†áËÆ°ÁÆóÂÆåÊàê")
            return data
            
        except Exception as e:
            print(f"‚ùå ËÆ°ÁÆóÊäÄÊúØÊåáÊ†áÂ§±Ë¥•: {e}")
            return data
    
    def generate_signals(self, data):
        """
        ÁîüÊàê‰∫§Êòì‰ø°Âè∑
        
        Args:
            data (pd.DataFrame): ÂåÖÂê´ÊäÄÊúØÊåáÊ†áÁöÑÊï∞ÊçÆ
            
        Returns:
            pd.DataFrame: Ê∑ªÂä†‰∫§Êòì‰ø°Âè∑ÁöÑÊï∞ÊçÆ
        """
        print("üéØ ÁîüÊàê‰∫§Êòì‰ø°Âè∑...")
        
        try:
            # ÂàùÂßãÂåñ‰ø°Âè∑Âàó
            data['signal'] = 0  # 0: Êó†‰ø°Âè∑, 1: ‰π∞ÂÖ•, -1: ÂçñÂá∫
            data['signal_strength'] = 0  # ‰ø°Âè∑Âº∫Â∫¶ 0-100
            
            # Á≠ñÁï•1: ÁßªÂä®Âπ≥ÂùáÁ∫ø‰∫§Âèâ
            ma_cross_buy = (data['MA5'] > data['MA10']) & (data['MA5'].shift(1) <= data['MA10'].shift(1))
            ma_cross_sell = (data['MA5'] < data['MA10']) & (data['MA5'].shift(1) >= data['MA10'].shift(1))
            
            # Á≠ñÁï•2: RSIË∂Ö‰π∞Ë∂ÖÂçñ
            rsi_oversold = data['RSI'] < 30
            rsi_overbought = data['RSI'] > 70
            
            # Á≠ñÁï•3: MACDÈáëÂèâÊ≠ªÂèâ
            macd_golden = (data['MACD'] > data['MACD_signal']) & (data['MACD'].shift(1) <= data['MACD_signal'].shift(1))
            macd_death = (data['MACD'] < data['MACD_signal']) & (data['MACD'].shift(1) >= data['MACD_signal'].shift(1))
            
            # Á≠ñÁï•4: Â∏ÉÊûóÂ∏¶Á™ÅÁ†¥
            bb_break_up = data['close'] > data['BB_upper']
            bb_break_down = data['close'] < data['BB_lower']
            
            # ÁªºÂêà‰ø°Âè∑ÁîüÊàê
            buy_signals = ma_cross_buy | (rsi_oversold & macd_golden) | bb_break_down
            sell_signals = ma_cross_sell | (rsi_overbought & macd_death) | bb_break_up
            
            # ËÆæÁΩÆ‰ø°Âè∑
            data.loc[buy_signals, 'signal'] = 1
            data.loc[sell_signals, 'signal'] = -1
            
            # ËÆ°ÁÆó‰ø°Âè∑Âº∫Â∫¶
            for idx in data.index:
                if data.loc[idx, 'signal'] != 0:
                    strength = 0
                    
                    # MA‰ø°Âè∑Âº∫Â∫¶
                    if ma_cross_buy.loc[idx] or ma_cross_sell.loc[idx]:
                        strength += 25
                    
                    # RSI‰ø°Âè∑Âº∫Â∫¶
                    if rsi_oversold.loc[idx] or rsi_overbought.loc[idx]:
                        strength += 25
                    
                    # MACD‰ø°Âè∑Âº∫Â∫¶
                    if macd_golden.loc[idx] or macd_death.loc[idx]:
                        strength += 25
                    
                    # Â∏ÉÊûóÂ∏¶‰ø°Âè∑Âº∫Â∫¶
                    if bb_break_up.loc[idx] or bb_break_down.loc[idx]:
                        strength += 25
                    
                    data.loc[idx, 'signal_strength'] = min(strength, 100)
            
            # ÁªüËÆ°‰ø°Âè∑
            buy_count = (data['signal'] == 1).sum()
            sell_count = (data['signal'] == -1).sum()
            
            print(f"‚úÖ ‰ø°Âè∑ÁîüÊàêÂÆåÊàê: ‰π∞ÂÖ•‰ø°Âè∑ {buy_count} ‰∏™, ÂçñÂá∫‰ø°Âè∑ {sell_count} ‰∏™")
            return data
            
        except Exception as e:
            print(f"‚ùå ÁîüÊàê‰∫§Êòì‰ø°Âè∑Â§±Ë¥•: {e}")
            return data
    
    def execute_trades(self, data, stock_code):
        """
        ÊâßË°å‰∫§Êòì
        
        Args:
            data (pd.DataFrame): ÂåÖÂê´‰∫§Êòì‰ø°Âè∑ÁöÑÊï∞ÊçÆ
            stock_code (str): ËÇ°Á•®‰ª£Á†Å
        """
        print("üíº ÂºÄÂßãÊâßË°å‰∫§Êòì...")
        
        executed_trades = 0
        
        for idx, row in data.iterrows():
            if row['signal'] != 0:
                try:
                    if row['signal'] == 1:  # ‰π∞ÂÖ•‰ø°Âè∑
                        result = self._execute_buy(stock_code, row['close'], row['signal_strength'], idx)
                        if result:
                            executed_trades += 1
                    
                    elif row['signal'] == -1:  # ÂçñÂá∫‰ø°Âè∑
                        result = self._execute_sell(stock_code, row['close'], row['signal_strength'], idx)
                        if result:
                            executed_trades += 1
                            
                except Exception as e:
                    print(f"‚ùå ÊâßË°å‰∫§ÊòìÂ§±Ë¥• {idx}: {e}")
                    continue
        
        print(f"‚úÖ ‰∫§ÊòìÊâßË°åÂÆåÊàêÔºåÂÖ±ÊâßË°å {executed_trades} Á¨î‰∫§Êòì")
        self._save_trade_log()
    
    def _execute_buy(self, stock_code, price, strength, date):
        """ÊâßË°å‰π∞ÂÖ•Êìç‰Ωú"""
        try:
            # ËÆ°ÁÆó‰π∞ÂÖ•Êï∞Èáè (Âü∫‰∫é‰ø°Âè∑Âº∫Â∫¶ÂíåÂèØÁî®ËµÑÈáë)
            max_position_value = self.cash * 0.3  # ÊúÄÂ§ßÂçïÁ¨îÊäïËµÑ30%ËµÑÈáë
            position_ratio = strength / 100 * 0.5  # Ê†πÊçÆ‰ø°Âè∑Âº∫Â∫¶Ë∞ÉÊï¥‰ªì‰Ωç
            buy_value = max_position_value * position_ratio
            quantity = int(buy_value / price / 100) * 100  # Êï¥Êâã‰π∞ÂÖ•
            
            if quantity < 100 or buy_value > self.cash:
                return False
            
            # ÊâßË°å‰π∞ÂÖ•
            if self.use_real_trading:
                # ÁúüÂÆû‰∫§Êòì
                order_result = self.trader.buy(stock_code, price, quantity)
                if order_result and order_result.get('success', False):
                    success = True
                else:
                    return False
            else:
                # Ê®°Êãü‰∫§Êòì
                success = self.trader.buy(stock_code, price, quantity)
            
            if success:
                # Êõ¥Êñ∞ÊåÅ‰ªìÂíåËµÑÈáë
                if stock_code not in self.position:
                    self.position[stock_code] = {'quantity': 0, 'avg_price': 0}
                
                old_quantity = self.position[stock_code]['quantity']
                old_avg_price = self.position[stock_code]['avg_price']
                
                new_quantity = old_quantity + quantity
                new_avg_price = ((old_quantity * old_avg_price) + (quantity * price)) / new_quantity
                
                self.position[stock_code]['quantity'] = new_quantity
                self.position[stock_code]['avg_price'] = new_avg_price
                self.cash -= quantity * price
                
                # ËÆ∞ÂΩï‰∫§Êòì
                trade_record = {
                    'date': date,
                    'stock_code': stock_code,
                    'action': 'BUY',
                    'price': price,
                    'quantity': quantity,
                    'amount': quantity * price,
                    'signal_strength': strength,
                    'cash_after': self.cash
                }
                self.trade_log.append(trade_record)
                
                print(f"  ‚úÖ ‰π∞ÂÖ• {stock_code}: {quantity}ËÇ° @ {price:.2f}, Âº∫Â∫¶: {strength}")
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå ‰π∞ÂÖ•Êìç‰ΩúÂ§±Ë¥•: {e}")
            return False
    
    def _execute_sell(self, stock_code, price, strength, date):
        """ÊâßË°åÂçñÂá∫Êìç‰Ωú"""
        try:
            if stock_code not in self.position or self.position[stock_code]['quantity'] <= 0:
                return False
            
            # ËÆ°ÁÆóÂçñÂá∫Êï∞Èáè (Âü∫‰∫é‰ø°Âè∑Âº∫Â∫¶ÂíåÊåÅ‰ªì)
            current_quantity = self.position[stock_code]['quantity']
            sell_ratio = strength / 100 * 0.8  # Ê†πÊçÆ‰ø°Âè∑Âº∫Â∫¶Ë∞ÉÊï¥ÂçñÂá∫ÊØî‰æã
            quantity = int(current_quantity * sell_ratio / 100) * 100  # Êï¥ÊâãÂçñÂá∫
            
            if quantity < 100:
                quantity = current_quantity  # ÂÖ®ÈÉ®ÂçñÂá∫
            
            # ÊâßË°åÂçñÂá∫
            if self.use_real_trading:
                # ÁúüÂÆû‰∫§Êòì
                order_result = self.trader.sell(stock_code, price, quantity)
                if order_result and order_result.get('success', False):
                    success = True
                else:
                    return False
            else:
                # Ê®°Êãü‰∫§Êòì
                success = self.trader.sell(stock_code, price, quantity)
            
            if success:
                # Êõ¥Êñ∞ÊåÅ‰ªìÂíåËµÑÈáë
                self.position[stock_code]['quantity'] -= quantity
                self.cash += quantity * price
                
                # ËÆ∞ÂΩï‰∫§Êòì
                trade_record = {
                    'date': date,
                    'stock_code': stock_code,
                    'action': 'SELL',
                    'price': price,
                    'quantity': quantity,
                    'amount': quantity * price,
                    'signal_strength': strength,
                    'cash_after': self.cash
                }
                self.trade_log.append(trade_record)
                
                print(f"  ‚úÖ ÂçñÂá∫ {stock_code}: {quantity}ËÇ° @ {price:.2f}, Âº∫Â∫¶: {strength}")
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå ÂçñÂá∫Êìç‰ΩúÂ§±Ë¥•: {e}")
            return False
    
    def _save_trade_log(self):
        """‰øùÂ≠ò‰∫§ÊòìËÆ∞ÂΩï"""
        if self.trade_log:
            df = pd.DataFrame(self.trade_log)
            filename = f"{self.log_dir}/trade_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            df.to_csv(filename, index=False)
            print(f"üìÅ ‰∫§ÊòìËÆ∞ÂΩïÂ∑≤‰øùÂ≠òÂà∞ {filename}")
    
    def analyze_performance(self):
        """ÂàÜÊûê‰∫§ÊòìÁª©Êïà"""
        print("\n" + "=" * 50)
        print("üìä ‰∫§ÊòìÁª©ÊïàÂàÜÊûê")
        print("=" * 50)
        
        if not self.trade_log:
            print("‚ùå Êó†‰∫§ÊòìËÆ∞ÂΩï")
            return
        
        df = pd.DataFrame(self.trade_log)
        
        # Âü∫Êú¨ÁªüËÆ°
        total_trades = len(df)
        buy_trades = len(df[df['action'] == 'BUY'])
        sell_trades = len(df[df['action'] == 'SELL'])
        
        print(f"üìà ÊÄª‰∫§ÊòìÊ¨°Êï∞: {total_trades}")
        print(f"üìà ‰π∞ÂÖ•Ê¨°Êï∞: {buy_trades}")
        print(f"üìà ÂçñÂá∫Ê¨°Êï∞: {sell_trades}")
        
        # ËµÑÈáëÂèòÂåñ
        initial_cash = 100000
        final_cash = self.cash
        total_position_value = sum([pos['quantity'] * pos['avg_price'] for pos in self.position.values()])
        total_value = final_cash + total_position_value
        
        print(f"üí∞ ÂàùÂßãËµÑÈáë: {initial_cash:,.2f}")
        print(f"üí∞ Ââ©‰ΩôÁé∞Èáë: {final_cash:,.2f}")
        print(f"üí∞ ÊåÅ‰ªìÂ∏ÇÂÄº: {total_position_value:,.2f}")
        print(f"üí∞ ÊÄªËµÑ‰∫ß: {total_value:,.2f}")
        print(f"üìä ÊÄªÊî∂ÁõäÁéá: {((total_value - initial_cash) / initial_cash * 100):+.2f}%")
        
        # ÊåÅ‰ªìÊÉÖÂÜµ
        if self.position:
            print(f"\nüìã ÂΩìÂâçÊåÅ‰ªì:")
            for stock, pos in self.position.items():
                if pos['quantity'] > 0:
                    print(f"  {stock}: {pos['quantity']}ËÇ°, ÊàêÊú¨‰ª∑: {pos['avg_price']:.2f}")
    
    def visualize_results(self, data, stock_code):
        """ÂèØËßÜÂåñ‰∫§ÊòìÁªìÊûú"""
        print("üìà ÁªòÂà∂‰∫§ÊòìÁªìÊûúÂõæË°®...")
        
        try:
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
            
            # 1. ‰ª∑Ê†ºËµ∞ÂäøÂíå‰∫§Êòì‰ø°Âè∑
            ax1.plot(data.index, data['close'], label='Êî∂Áõò‰ª∑', linewidth=2, color='blue')
            ax1.plot(data.index, data['MA5'], label='MA5', alpha=0.7, color='orange')
            ax1.plot(data.index, data['MA20'], label='MA20', alpha=0.7, color='red')
            
            # Ê†áËÆ∞‰π∞ÂçñÁÇπ
            buy_signals = data[data['signal'] == 1]
            sell_signals = data[data['signal'] == -1]
            
            ax1.scatter(buy_signals.index, buy_signals['close'], 
                       color='green', marker='^', s=100, label='‰π∞ÂÖ•‰ø°Âè∑', zorder=5)
            ax1.scatter(sell_signals.index, sell_signals['close'], 
                       color='red', marker='v', s=100, label='ÂçñÂá∫‰ø°Âè∑', zorder=5)
            
            ax1.set_title(f'{stock_code} ‰ª∑Ê†ºËµ∞Âäø‰∏é‰∫§Êòì‰ø°Âè∑', fontsize=14)
            ax1.set_ylabel('‰ª∑Ê†º (ÂÖÉ)')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # 2. RSIÊåáÊ†á
            ax2.plot(data.index, data['RSI'], color='purple', label='RSI')
            ax2.axhline(y=70, color='r', linestyle='--', alpha=0.7, label='Ë∂Ö‰π∞Á∫ø(70)')
            ax2.axhline(y=30, color='g', linestyle='--', alpha=0.7, label='Ë∂ÖÂçñÁ∫ø(30)')
            ax2.set_title('RSIÊåáÊ†á')
            ax2.set_ylabel('RSI')
            ax2.set_ylim(0, 100)
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            
            # 3. MACDÊåáÊ†á
            ax3.plot(data.index, data['MACD'], color='blue', label='MACD')
            ax3.plot(data.index, data['MACD_signal'], color='red', label='Signal')
            ax3.bar(data.index, data['MACD_hist'], alpha=0.6, color='green', label='Histogram')
            ax3.axhline(y=0, color='black', linestyle='-', alpha=0.3)
            ax3.set_title('MACDÊåáÊ†á')
            ax3.set_ylabel('MACD')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
            
            # 4. ‰∫§ÊòìÁªüËÆ°
            if self.trade_log:
                trade_df = pd.DataFrame(self.trade_log)
                trade_df['date'] = pd.to_datetime(trade_df['date'])
                
                # ÊåâÊó•ÊúüÁªüËÆ°‰∫§ÊòìÈáëÈ¢ù
                daily_trades = trade_df.groupby(trade_df['date'].dt.date)['amount'].sum()
                ax4.bar(daily_trades.index, daily_trades.values, alpha=0.7, color='skyblue')
                ax4.set_title('ÊØèÊó•‰∫§ÊòìÈáëÈ¢ù')
                ax4.set_ylabel('‰∫§ÊòìÈáëÈ¢ù (ÂÖÉ)')
                ax4.tick_params(axis='x', rotation=45)
            else:
                ax4.text(0.5, 0.5, 'Êó†‰∫§ÊòìËÆ∞ÂΩï', ha='center', va='center', transform=ax4.transAxes)
                ax4.set_title('‰∫§ÊòìÁªüËÆ°')
            
            ax4.grid(True, alpha=0.3)
            
            plt.tight_layout()
            
            # ‰øùÂ≠òÂõæË°®
            chart_filename = f"{self.data_dir}/{stock_code}_trading_results.png"
            plt.savefig(chart_filename, dpi=300, bbox_inches='tight')
            plt.show()
            
            print(f"‚úÖ ÂõæË°®Â∑≤‰øùÂ≠òÂà∞ {chart_filename}")
            
        except Exception as e:
            print(f"‚ùå ÁªòÂà∂ÂõæË°®Â§±Ë¥•: {e}")


class MockTrader:
    """Ê®°Êãü‰∫§ÊòìÂô®"""
    
    def __init__(self):
        self.orders = []
        print("üìù Ê®°Êãü‰∫§ÊòìÂô®ÂàùÂßãÂåñÂÆåÊàê")
    
    def buy(self, stock_code, price, quantity):
        """Ê®°Êãü‰π∞ÂÖ•"""
        order = {
            'stock_code': stock_code,
            'action': 'BUY',
            'price': price,
            'quantity': quantity,
            'timestamp': datetime.now()
        }
        self.orders.append(order)
        return True
    
    def sell(self, stock_code, price, quantity):
        """Ê®°ÊãüÂçñÂá∫"""
        order = {
            'stock_code': stock_code,
            'action': 'SELL',
            'price': price,
            'quantity': quantity,
            'timestamp': datetime.now()
        }
        self.orders.append(order)
        return True


def main():
    """‰∏ªÂáΩÊï∞ - ÂÆåÊï¥ÁöÑ‰∫§ÊòìÁ≠ñÁï•ÊºîÁ§∫"""
    print("=" * 60)
    print("üöÄ ËÇ°Á•®ÈáèÂåñ‰∫§ÊòìÂ≠¶‰π†Ê°à‰æã - Êï∞ÊçÆËé∑Âèñ‰∏é‰∫§ÊòìÁªìÂêà")
    print("=" * 60)
    
    # ÂàùÂßãÂåñ‰∫§ÊòìÁ≠ñÁï•
    strategy = TradingStrategy(use_real_trading=False)  # ‰ΩøÁî®Ê®°Êãü‰∫§Êòì
    
    # ÊµãËØïËÇ°Á•®
    stock_code = '000001'
    
    print("\n" + "=" * 40)
    print("üìä Á¨¨‰∏ÄÊ≠•ÔºöÂä†ËΩΩËÇ°Á•®Êï∞ÊçÆ")
    print("=" * 40)
    
    # Âä†ËΩΩÊï∞ÊçÆ
    data = strategy.load_sample_data(stock_code)
    if data.empty:
        print("‚ùå Êó†Ê≥ïËé∑ÂèñËÇ°Á•®Êï∞ÊçÆ")
        return
    
    print(f"‚úÖ Êï∞ÊçÆÂä†ËΩΩÂÆåÊàêÔºåÂÖ± {len(data)} Êù°ËÆ∞ÂΩï")
    print(f"üìÖ Êï∞ÊçÆËåÉÂõ¥: {data.index[0].strftime('%Y-%m-%d')} Ëá≥ {data.index[-1].strftime('%Y-%m-%d')}")
    
    print("\n" + "=" * 40)
    print("üìà Á¨¨‰∫åÊ≠•ÔºöËÆ°ÁÆóÊäÄÊúØÊåáÊ†á")
    print("=" * 40)
    
    # ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á
    data = strategy.calculate_indicators(data)
    
    print("\n" + "=" * 40)
    print("üéØ Á¨¨‰∏âÊ≠•ÔºöÁîüÊàê‰∫§Êòì‰ø°Âè∑")
    print("=" * 40)
    
    # ÁîüÊàê‰∫§Êòì‰ø°Âè∑
    data = strategy.generate_signals(data)
    
    print("\n" + "=" * 40)
    print("üíº Á¨¨ÂõõÊ≠•ÔºöÊâßË°å‰∫§Êòì")
    print("=" * 40)
    
    # ÊâßË°å‰∫§Êòì
    strategy.execute_trades(data, stock_code)
    
    print("\n" + "=" * 40)
    print("üìä Á¨¨‰∫îÊ≠•ÔºöÁª©ÊïàÂàÜÊûê")
    print("=" * 40)
    
    # ÂàÜÊûêÁª©Êïà
    strategy.analyze_performance()
    
    print("\n" + "=" * 40)
    print("üìà Á¨¨ÂÖ≠Ê≠•ÔºöÁªìÊûúÂèØËßÜÂåñ")
    print("=" * 40)
    
    # ÂèØËßÜÂåñÁªìÊûú
    strategy.visualize_results(data, stock_code)
    
    print("\n" + "=" * 60)
    print("‚úÖ ÂÆåÊï¥‰∫§ÊòìÁ≠ñÁï•ÊºîÁ§∫ÂÆåÊàêÔºÅ")
    print("üìÅ ÊâÄÊúâÊñá‰ª∂Â∑≤‰øùÂ≠òÂà∞Áõ∏Â∫îÁõÆÂΩï")
    print("üìù ËøôÊòØ‰∏Ä‰∏™ÂÆåÊï¥ÁöÑ‰ªéÊï∞ÊçÆËé∑ÂèñÂà∞‰∫§ÊòìÊâßË°åÁöÑÂ≠¶‰π†Ê°à‰æã")
    print("üîÑ ÊÇ®ÂèØ‰ª•‰øÆÊîπÁ≠ñÁï•ÂèÇÊï∞Êù•ÊµãËØï‰∏çÂêåÁöÑ‰∫§ÊòìÁ≠ñÁï•")
    print("=" * 60)


if __name__ == "__main__":
    main()